\documentclass[journal]{vgtc}                % final (journal style)
%\documentclass[review,journal]{vgtc}         % review (journal style)
%\documentclass[widereview]{vgtc}             % wide-spaced review
%\documentclass[preprint,journal]{vgtc}       % preprint (journal style)
%\documentclass[electronic,journal]{vgtc}     % electronic version, journal
\usepackage{color}
\usepackage{stmaryrd}
%% Uncomment one of the lines above depending on where your paper is
%% in the conference process. ``review'' and ``widereview'' are for review
%% submission, ``preprint'' is for pre-publication, and the final version
%% doesn't use a specific qualifier. Further, ``electronic'' includes
%% hyperreferences for more convenient online viewing.

%% Please use one of the ``review'' options in combination with the
%% assigned online id (see below) ONLY if your paper uses a double blind
%% review process. Some conferences, like IEEE Vis and InfoVis, have NOT
%% in the past.

%% Please note that the use of figures other than the optional teaser is not permitted on the first page
%% of the journal version.  Figures should begin on the second page and be
%% in CMYK or Grey scale format, otherwise, colour shifting may occur
%% during the printing process.  Papers submitted with figures other than the optional teaser on the
%% first page will be refused.

%% These three lines bring in essential packages: ``mathptmx'' for Type 1
%% typefaces, ``graphicx'' for inclusion of EPS figures. and ``times''
%% for proper handling of the times font family.
\usepackage{natbib}
\usepackage{mathptmx}
\usepackage{graphicx}
\usepackage{times}

%% We encourage the use of mathptmx for consistent usage of times font
%% throughout the proceedings. However, if you encounter conflicts
%% with other math-related packages, you may want to disable it.

%% This turns references into clickable hyperlinks.
\usepackage[bookmarks,backref=true,linkcolor=black]{hyperref} %,colorlinks
\hypersetup{
  pdfauthor = {},
  pdftitle = {},
  pdfsubject = {},
  pdfkeywords = {},
  colorlinks=true,
  linkcolor= black,
  citecolor= black,
  pageanchor=true,
  urlcolor = black,
  plainpages = false,
  linktocpage
}

%% If you are submitting a paper to a conference for review with a double
%% blind reviewing process, please replace the value ``0'' below with your
%% OnlineID. Otherwise, you may safely leave it at ``0''.
\onlineid{0}

%% declare the category of your paper, only shown in review mode
\vgtccategory{Research}

%% allow for this line if you want the electronic option to work properly
\vgtcinsertpkg

%% In preprint mode you may define your own headline.
%\preprinttext{To appear in an IEEE VGTC sponsored conference.}

%% Paper title.

\title{Animint: a Grammar for Interactive Animations}

%% This is how authors are specified in the journal style

%% indicate IEEE Member or Student Member in form indicated below
\author{Toby Dylan Hocking and Susan VanderPlas}
\authorfooter{
%% insert punctuation at end of each item
\item
 Toby Dylan Hocking is with McGill Human Genetics. E-mail: toby.hocking@mail.mcgill.ca.
\item
 Susan VanderPlas is with Iowa State Statistics. E-mail: srvanderplas@gmail.com.
}

%other entries to be set up for journal
\shortauthortitle{Hocking \MakeLowercase{\textit{et al.}}: Animint: a
  Grammar for Interactive Animations}
%\shortauthortitle{Firstauthor \MakeLowercase{\textit{et al.}}: Paper Title}

%% Abstract section.
\abstract{Animint is a novel high-level domain-specific language (DSL)
  for linked, interactive, animated plots. It builds on top of
  previous work on the grammar of graphics (ggplot2 in R) and
  interactive visualization using web standards (D3 in JavaScript). In
  other data visualization systems, interactive animations are
  difficult to accomplish, since they must be defined in terms of
  low-level operations and sometimes 100s of lines of code. In
  contrast, Animint's high-level DSL can be used to produce a wide
  variety of complex visualizations with only 10s of lines of code. It
  works by adding 2 new aesthetics to the grammar of graphics:
  \texttt{clickSelects}, which allows users to select elements of the
  plot, and \texttt{showSelected}, which displays only elements
  corresponding to the current selection. After using our novel
  declarative DSL to define an interactive animation in R code, it is
  first compiled and then rendered in a web browser using D3. We
  discuss the design of Animint, then compare to related libraries,
  and show several example visualizations of high-dimensional time
  series data.} % end of abstract

%% Keywords that describe your work. Will show as 'Index Terms' in journal
%% please capitalize first letter and insert punctuation after last keyword
\keywords{Information visualization, user interfaces, toolkits, 2D
  graphics, interactive, animation}

%% ACM Computing Classification System (CCS). 
%% See <http://www.acm.org/class/1998/> for details.
%% The ``\CCScat'' command takes four arguments.

\CCScatlist{ % not used in journal version
 \CCScat{K.6.1}{Management of Computing and Information Systems}%
{Project and People Management}{Life Cycle};
 \CCScat{K.7.m}{The Computing Profession}{Miscellaneous}{Ethics}
}

%% Uncomment below to include a teaser figure.
  \teaser{
  \centering
  \includegraphics[width=\textwidth]{figure-1}
  \caption{Interactive animation of World Bank data built with Animint
    (\url{http://bit.ly/1fzfUdN}). \textbf{Top}: There are 5 geometric
    elements across 2 linked plots: clicking a \texttt{clickSelects}
    element changes the currently selected year or country, and
    updates the corresponding \texttt{showSelected}
    elements. \textbf{Left}: a multiple time series from 1960 to 2012
    of the life expectancy of 205 countries, with a bold line
    indicating the selected country and a vertical grey tallrect
    indicating the selected year.  \textbf{Right}: a scatterplot of
    life expectancy versus fertility rate of all countries. The two
    text elements indicate the current selection: ``year = 1996'' and
    ``United States.''}
}

%% Uncomment below to disable the manuscript note
%\renewcommand{\manuscriptnotetxt}{}

%% Copyright space is enabled by default as required by guidelines.
%% It is disabled by the 'review' option or via the following command:
% \nocopyrightspace

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%% START OF THE PAPER %%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{document}

%% The ``\maketitle'' command must be the first command after the
%% ``\begin{document}'' command. It prepares and prints the title block.

%% the only exception to this rule is the \firstsection command
\firstsection{Introduction}

\maketitle

TODO: definition of interactive, which \citet{cleveland} calls
``direct manipulation.''

TODO: definition of animint user=designer and developer=programmer and
viewer=reader.

TODO: definition of brushing \citep{cleveland}. Three modes: transient
(data under brush = selection), lasting (data under brush are added to
the selection), or erasing (data under brush are removed from the
selection). Operations: labeling (show text near selection), enhanced
linking (change the symbol used to plot the selection) deletion
(e.g. outliers).

TODO: definition of animation. Changes over time based on data.

TODO: examples of animated and interactive, World Bank and Fig 9 of
\citet{d3}.

TODO: discussion of related JavaScript libraries, i.e. highcharts, D3, vega.

\citet{animated-transitions} studied what kinds of animated
transitions are good at accurately communicating information.

\citet{declarative} studied the benefits of declarative languages for
data visualization. One of the main benefits is optimization: ``By
decoupling specification from implementation, developers can implement
language optimizations without interfering with the work of
designers.'' They proposed a declarative syntax for animated
transitions.

TODO: comparison with library(animation)!

TODO: One of the main reasons for the success of D3 is that it allows
visualizations to be specified using the terminology of the Document
Object Model \citep{d3}, which makes learning D3 easy for web
developers. Similarly, using the ggplot2 syntax makes D3 graphics easy
for R developers.

%% \section{Introduction} %for journal use above \firstsection{..} instead

\section{Related Work}


In this section we offer a comparison between Animint and several
related libraries/packages in JavaScript/R
(Table~\ref{tab:packages}). The main difference is that Animint's
declarative syntax allows interactive animations to be expressed in
fewer lines of code than the other packages.

\subsection{Animated graphics libraries}

One way to achieve animation in an iterative programming syntax is by
using a for statement to loop over the time variable. This is the main
idea of the \href{http://yihui.name/animation/}{animation} package \citep{animation}. TODO: CODE COMPARISON
FIGURE.


\subsection{D3}

The current implementation of Animint uses \href{http://d3js.org/}{D3} to render interactive
animations in a web browser \citep{d3}. D3 is more expressive than
animint, but is also more verbose. In addition, animint uses a grammar of graphics approach to produce higher-level plots, which is arguably simpler and more elegant than constructing a plot from simple elements using D3. (TODO: CODE COMPARISON FIGURE)

\begin{figure}
  \centering
TODO: code for D3, shiny, animation...?
  \caption{Comparison of code for the World Bank visualization.}
\label{fig:compare}
\end{figure}

\subsection{Libraries based on the grammar of graphics}  %: Vega, ggplot2, ggvis

In this section we discuss the differences between Animint and
several other high-level DSLs for data visualization based on the grammar of graphics philosophy \citep{wilkinson}: ggplot2, Vega, and ggvis.

\paragraph{ggplot2}
The current implementation of Animint extends the declarative DSL of
\href{http://ggplot2.org/}{ggplot2} \citep{ggplot2-book,
  ggplot2-paper}. Strictly speaking, ggplot2 is for non-interactive
and non-animated visualizations. Extending ggplot2 syntax to
accommodate interactive, animated graphics allows R users familiar
with ggplot2 to create web-ready graphics using the familiar grammar
of graphics approach in an already familiar language.

\paragraph{Vega}
Like Animint, \href{http://trifacta.github.io/vega/}{Vega} is a
declarative DSL that builds on top of D3 \citep{vega}. Both sacrifice
some of the power of D3, while still allowing a wide variety of plots
to be defined in fewer lines of code than pure D3. The main idea of
Vega is to declaratively define a visualization using a special type
of JavaScript Object Notation (JSON) file. As discussed in
Section~\ref{sec:design}, Animint also internally uses a JSON file to
store meta-data about an interactive animation.

There are two main differences between Vega and Animint. First, the
Animint user writes R code, but the Vega user writes a JSON
file. Second and more importantly, Vega does not currently support
interactive animations. However, it should be possible for Vega to
support interactive animations in the future, by adding expanding
their JSON file format definition to support mark proporties based on
the clickSelects and showSelected ideas introduced in this paper in
Section~\ref{sec:design}.


\paragraph{ggvis} The authors of ggplot2 are currently working on a
package for interactive graphics called
\href{http://ggvis.rstudio.com/}{ggvis} \citep{ggvis}. There are many
differences between ggvis and Animint, but the main difference is that
ggvis is more powerful and verbose, while Animint is more succinct for
expressing interactive plots that show/hide data subsets
(Table~\ref{tab:packages}). At the level of defining plots in R code,
a ggvis object corresponds to a single plot, while an Animint object
is a list of several plots which are linked using the clickSelects and
showSelected aesthetics. Another difference is that sharing a ggvis
visualization requires a web server that runs R and shiny
\citep{shiny}, but Animint uses static files and client-side
JavaScript so it does not require any special web server software. The
two packages also have different interactive features: ggvis uses
sliders, checkboxes, and other HTML form elements, and Animint
provides clickable SVG elements. This usually results in a richer
Animint data visualization using fewer lines of code. For example, in
a ggvis of the WorldBank data (Figure~1), it is natural to use a
slider to select the displayed year. In contrast, in Animint we used a
clickable multiple time series plot for the same purpose, giving the
viewer a more comprehensive view of these multidimensional data.

In addition to the libraries discussed above, there are several other
libraries which can generate interactive web plots: rCharts
\citep{rcharts}, polycharts.js \citep{polycharts},
\href{http://www.highcharts.com/}{highcharts} \citep{highcharts}, and
numerous others. These libraries have varying degrees of high-level
syntax for plot specification, but 
%all seem to be less popular than D3-based libraries, and
none are based on the grammar of graphics approach to plot
creation. More importantly for this paper, none of these libraries
allow creation of interactive animations.

\section{Design}
\label{sec:design}

In this section we explain the main idea of the Animint grammar for
interactive animations. We use the World Bank example of Figure~1 as a
motivating example.

<<opts, echo=FALSE, message=FALSE, cache=FALSE>>=
library(animint)
data(WorldBank)
write.csv(WorldBank, "WorldBank.csv")
opts_chunk$set(tidy=FALSE, eval=FALSE)
opts_knit$set(out.format="latex")
knit_theme$set("edit-matlab")
@ 

In contrast to the sliders of ggvis, animint is designed for
interactivity via direct manipulation of the plot elements. To
facilitate this goal, we created a new geom called ``tallrect," which
tiles the plot area with rectangles that span the y region of the plot
and correspond to specific x values or intervals. Users can click on
any one tallrect, and the \texttt{clickSelects} aesthetic passes the
selected element to other linked plots, which display data
corresponding to the selected variable. In the first plot shown in
Figure~\ref{fig:compare}, year is used to create tallrects and
\texttt{clickSelects=1996}, and in the second plot, life expectancy
and fertility rate are shown for the selected year.

<<yearRects-geom>>=
yearRects <- geom_tallrect(
  aes(xmin=year-1/2, xmax=year+1/2, 
      clickSelects=year),
  data=years, alpha=1/2)
@ 

Animint also provides a shorthand syntax for tallrects, as they are a
common geom/aesthetic pairing in linked plots.

<<yearRects-make>>=
yearRects <- make_tallrect(WorldBank, "year")
@ 

This approach allows us to utilize both plots to display meaningful
information: we can overlay the tallrects in the first plot with time
series data while still using the tallrects to modify the second
plot. Similar linked graphs could be produced with D3, but the grammar
of graphics approach allows for fewer lines of code and simpler
debugging.

<<timeSeries, tidy=FALSE>>=
timeSeries <- ggplot()+
  yearRects+
  geom_line(
    aes(x=year, y=life.expectancy, 
        group=country, colour=region,
        clickSelects=country),
    data=WorldBank, size=3, alpha=3/5)
@ 

In order to clarify which data is being shown on the second plot in
Figure~\ref{fig:compare}, we add a text label that shows the selected
year above the plot. This set of labels (one corresponding to each
year) is created using ggplot2's \verb|geom_text|, and only one label
is shown at a time due to the \texttt{showSelected} aesthetic.

<<yearText-geom, tidy=FALSE>>=
yearText <- geom_text(
  aes(label=year, showSelected=year),
  x=5, y=80, 
  data=years)
@ 
As the pairing of text geom with a corresponding \texttt{showSelected} aesthetic is frequently useful in linked plots, animint also includes a shorthand function to make defining this combination more efficient. 
<<yearText-make>>=
yearText <- make_text(data=years, 
  x=5, y=80, showSelected="year")
@ 

Animint does not require that linked plots originate from the same dataset; the selection aesthetics will work with separate datasets provided that the \texttt{clickSelects} and \texttt{showSelected} variables are of the same type and have the same values present in each dataset. This allows plots to utilize summary statistics and reduce the size of the data passed to the web browser. 

<<scatterPlot>>=
scatterPlot <- ggplot()+
  yearText+
  geom_point(
    aes(x=fertility.rate, y=life.expectancy, 
        colour=region, size=population,
        clickSelects=country, 
        showSelected=year),
    data=WorldBank)+
  geom_text(
    aes(x=fertility.rate, y=life.expectancy, 
        label=country,
        showSelected=country, 
        showSelected2=year),
    data=WorldBank)+
  scale_size_animint(pixel.range=c(2, 20), 
    breaks=10^(4:9))
@ 
We can also add another selection element to link countries in plot 2 to the lines in plot 1. This will allow us to identify selected points in the second plot with a text label and display the corresponding time series in the first plot. Note that the animint extension of ggplot2 aesthetics allows for multiple showSelected elements (year and country) that can interact to jointly subset the full data. 

Once we have created the static plots using the extended ggplot2 grammar of graphics syntax, we can use the workhorse function of the animint package, \texttt{gg2animint}, to output our linked plots to a webpage, where they can be rendered using D3. \texttt{gg2animint} allows us to specify that in absence of user interaction, we want the plots to animate over time, progressing at a rate of one year every 3 seconds. We also specify the duration of each frame in the animation, which allows for smooth transitions. Animint outputs the index.html file and the relevent javascript libraries to the specified output directory, where the user can upload it to the web or open the interactive graphic in a local browser. 
<<gg2animint,fig.pos='htbp'>>=
viz <- 
  list(scatterPlot=scatterPlot,
       timeSeries=timeSeries,
       time=list(variable="year",ms=3000),
       duration=list(year=1000))
gg2animint(viz, out.dir="WorldBank")
@ 


\begin{table}[htbp]
%% Table captions on top in journal version
  \caption{Comparison of graphics packages that can achieve 
    interactive animations. We show the language and number of lines of code 
    to implement the World Bank visualization shown in Figure 1.}
 \label{tab:packages}
 \scriptsize
 \begin{center}
  \begin{tabular}{cccccc}
    Package & years & interaction vars & 
    %programming &
    language & lines \\
    \hline
    tcltk & 1991- & several & 
    %object &
    & 100s \\
    animation & 2007- & 1 = time & 
    %imperative &
    R & 40 \\
    D3 & 2011- & several & 
    %declarative & 
    JavaScript &TODO \\
    shiny & 2012- & several & 
    %reactive & 
    R & 60 \\
    animint & 2013- & several & 
    %declarative & 
    R& 20 
  \end{tabular}
 \end{center}
\end{table}

\section{Example applications}

In this section we discuss the range of examples that we have
implemented with Animint (Table~\ref{tab:examples}). We begin with a
discussion of our experience implementing the World Bank visualization
of Figure~1 using several different libraries, then discuss several
other interactive animations that we have built with Animint.

\subsection{Comparison study: World Bank data}

There are inherent tradeoffs to using a web server system like
ggvis+shiny rather than an entirely web client/JavaScript-based
system. It is better to use a web server system when there are many
more subsets of the data than can ever be transferred over the
network. Web server systems are also good when you want to perform
arbitrary calculations in R/C code on the server and then send the
result across the network. However, for interactive animations, the
server only calculates data subsets, so waiting for the server to
respond after every mouse click results in an interactive plot than is
less responsive than can be achieved using Animint. Furthermore, in
web server systems the client may not cache previously viewed subsets,
which results in calculations inefficiently being performed several
times rather than simply saved for quick viewing later. In general, if
all the data subsets can be transferred across the network, it is
better to use a JavaScript-based system like Animint rather than a web
server system.

TODO: Susan's shiny app BITLY.

\begin{table*}
  \centering
  \input{table-examples}
  \caption{Characteristics of nine interactive visualizations built with 
    Animint. From left to right, we show the data set name, the 
    lines of R code including data processing but not including comments
    (LOC, 80 characters max per line), 
    the amount of time it takes to compile the visualization (seconds), 
    the total size of the uncompressed CSV files in megabytes (MB),
    the total number of data points (rows), 
    the median number of data points shown at once (onscreen),
    the number of data columns visualized (variables), 
    the number of clickSelects/showSelected variables (interactive),
    the number of linked panels (plots),
    if the plot is animated, 
    and the corresponding Figure number in this paper (Fig).
  }
\label{tab:examples}
\end{table*}

\subsection{Animated examples}

Mostly useful when one of the variables is time, as in Figure~1. TODO
COMMENTARY.

Figure~\ref{fig:tornado} shows an interactive animation of the tornado
data. TODO COMMENTARY.


\begin{figure*}
  \centering
  \includegraphics[width=\textwidth]{figure-tornado}
  \caption{Interactive animation of tornadoes recorded from 1950 to
    2012 in the United States (TODO:BITLY). \textbf{Left}: map of the
    lower 48 United States with tornado paths in 1982. The text 
    shows the selected year, and clicking the map changes the selected
    state, currently Texas. \textbf{Right}: time series of tornado
    counts in Texas. Clicking a bar changes the selected year, and the
    text shows selected state and the number of tornadoes recorded
    there in that year (119 tornadoes in Texas in 1982).}
  \label{fig:tornado}
\end{figure*}

Figure~\ref{fig:climate} shows an interactive animation of the climate
data. TODO COMMENTARY.


\begin{figure*}
  \centering
  \includegraphics[width=\textwidth]{figure-climate}
  \caption{Visualization containing 6 linked, interactive, animated
    plots of Central American climate data (TODO:BITLY). \textbf{Top}:
    for the selected time (December 1997), maps displaying the spatial
    distribution of two temperature variables, and a scatterplot of
    these two variables. The selected region is displayed with a black
    outline, and can be changed by clicking a rect on the map or a
    point on the scatterplot. \textbf{Bottom}: time series of the two
    temperature variables with the selected region shown in violet,
    and a scatterplot of all times for that region. The selected time
    can be changed by clicking a background tallrect on a time series
    or a point on the scatterplot. The selected region can be changed
    by clicking a line on a time series.}
  \label{fig:climate}
\end{figure*}

\subsection{Non-animated examples}

When the data to visualize do not contain a time variable, we have
found that Animint is still useful for creating interactive but
non-animated plots.

TODO more discussion -- Discuss relationships between multivariate data. I may be able to provide an example in soybeans (but I'm not sure if I'm allowed to share that data, so it might be good to find some other linked variables - the ones I'm thinking about are protein, oil, and yield.)

\section{User feedback and observations}

We and our users have created interactive visualizations using Animint
that would be too complex to implement in other systems. Examples
discussed in previous sections include animated visualizations of
multiple time series data and non-animated visualizations of other
high-dimensional data sets. In this section we share comments and
constructive criticism that we have obtained from our users.

For the \texttt{prior} data visualization
(\url{http://bit.ly/1peIT7t}), the Animint user is a machine learning
researcher who developed an algorithm and applied it to 4 benchmark
data sets. He wanted to explore how his algorithm performed, in
comparison to a baseline learning algorithm. He appreciated the
intuitive understanding of the data that he gained using the
interactive plots: ``Interactive plotting allows us to explore all
relationships of our high-dimensional dataset and gives us an
intuitive understanding of the performance of our proposed
algorithm. An intuitive understanding of the results is important
since it shows under which conditions our proposed method works well
and provides avenues for further research.''

In another application, the Animint user was a genomics researcher:
``viewing and exploring my complex intestinal microbiome dataset in
[Animint] allowed me to grasp the patterns and relationships between
samples at an almost intuitive level. The interactive aspect of it was
very helpful for browsing through the dataset --- especially when
compared to scrolling through huge spreadsheets! Constructive
criticism: finding ways to speed up data loading would help maximize
the software’s utility for the visualization of large datasets.''

Users also appreciated the value of the web-based output format, and
the detail that is possible to show in interactive plots, but
impossible to show in publications: ``...  the web interface is simple
and easy to use.  It also enables us to publish more detailed
interactive results on our website to accompany the results presented
in publications.''

\begin{figure}
  \centering
  \includegraphics[width=\columnwidth]{figure-design}
  \caption{Schematic explanation of compilation and rendering the
    World Bank visualization shown in Figure~1. \textbf{Top}: the
    interactive animation is a list of 4 R objects: 2 ggplots and 2
    option lists. \textbf{Center}: Animint R code compiles data in
    ggplot geoms to a database of comma-separated values (CSV) files
    (\textcolor{red}{$\rightarrowtriangle$}). It also compiles plot
    meta-data including ggplot variable mappings, animation time
    options, and transition duration options to a JSON meta-data file
    ($\rightarrowtriangle$). \textbf{Bottom}: those data-dependent
    compiled files are combined with data-independent JavaScript and
    HTML files which render the interactive animation in a web browser
    (\textcolor{blue}{$\rightarrowtriangle$}).}
  \label{fig:design}
\end{figure}

\section{Limitations and future work}

There are several limitations to the current implementation of
Animint.

As discussed in Section~\ref{sec:design} and illustrated in
Figure~\ref{fig:design}, the compiler is written in R, and the
renderer is written in JavaScript. This means that Animint developers
must be proficient in both R and JavaScript. This represents a
significant barrier for source code contributions from developers who
are proficient with one language but not the other.

Animint users define interactive animations using only R code, and no
knowledge of JavaScript is necessary. This is convenient for useRs
from a statistical background, but presents a barrier for web
developers who are more familiar with JavaScript than R. For these web
developers, it would be advantageous in the future to implement a
compiler and renderer in pure JavaScript, by
possibly building clickSelects and showSelected extensions into Vega
\citep{vega}.

Types of interactivity: only showing and hiding data subsets. TODO.

Performance can be measured using speed, memory, and disk space
requirements in the compilation and rendering steps. In general, the
performance of the compilation step is related to the total amount of
data (``rows'' column in Table~\ref{tab:examples}), and the
performance of the rendering step is related to the amount of data
displayed at once (``onscreen'' column in
Table~\ref{tab:examples}). Future versions of Animint can definitely
improve on both steps. For example, the compilation step currently
saves geom-specific CSV files and could be improved by saving CSV
files for each showSelected subset of data. This would also allow for
faster rendering for large data sets, since then the plots could be
displayed as soon as the first selection is downloaded. In contrast,
the current code downloads all of the data before displaying the
geom. This highlights one of the main motivations for using the
Animint declarative DSL: none of the designer's R code needs to be
changed to implement improvements like this. Instead, the Animint
developers just need to work on a better compiler and rendering
engine.

\acknowledgments{The authors wish to thank Animint users MC Du
  Plessis, Song Liu, and Nikoleta Juretic who have contributed
  constructive criticism and helped its development.  }

% TDH 13 March 2014 This was in the template.tex file.
%\bibliographystyle{abbrv}

\bibliographystyle{abbrvnat}

%%use following if all content of bibtex file should be shown
%\nocite{*}
\bibliography{refs}
\end{document}
